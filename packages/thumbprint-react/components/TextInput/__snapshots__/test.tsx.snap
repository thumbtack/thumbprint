// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextInput adds \`autocomplete\` attribute 1`] = `
<TextInput
  autoComplete="given-name"
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoComplete="given-name"
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`autofocus\` attribute 1`] = `
<TextInput
  onChange={[Function]}
  shouldFocusOnPageLoad={true}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={true}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`dataTest\` prop 1`] = `
<TextInput
  dataTest="Duck"
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      data-test="Duck"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`disabled\` attribute 1`] = `
<TextInput
  isDisabled={true}
  onChange={[Function]}
>
  <div
    className="root rootUiStateDisabled"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={true}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDisabled"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`id\` attribute 1`] = `
<TextInput
  id="Goose"
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      id="Goose"
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`inputMode\` prop 1`] = `
<TextInput
  inputMode="numeric"
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      inputMode="numeric"
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`maxLength\` prop 1`] = `
<TextInput
  maxLength={5}
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      maxLength={5}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`pattern\` prop 1`] = `
<TextInput
  onChange={[Function]}
  pattern="[0-9]{5}"
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      pattern="[0-9]{5}"
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`readonly\` attribute 1`] = `
<TextInput
  isReadOnly={true}
  onChange={[Function]}
>
  <div
    className="root rootUiStateReadonly"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={true}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateReadonly"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds \`required\` attribute 1`] = `
<TextInput
  isRequired={true}
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={true}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds name 1`] = `
<TextInput
  name="my-input"
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      name="my-input"
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput adds placeholder 1`] = `
<TextInput
  onChange={[Function]}
  placeholder="Name"
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      placeholder="Name"
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput innerLeft renders \`innerLeft\` node when HTML element is provided 1`] = `
<TextInput
  innerLeft={
    <div>
      Goose
    </div>
  }
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <div
      className="inputInnerElement"
      onClick={[Function]}
    >
      <div>
        Goose
      </div>
    </div>
    <input
      autoFocus={false}
      className="input inputSizeLarge inputInnerLeft"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput innerLeft renders \`innerLeft\` node when text is provided 1`] = `
<TextInput
  innerLeft="Goose"
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <div
      className="inputInnerElement"
      onClick={[Function]}
    >
      Goose
    </div>
    <input
      autoFocus={false}
      className="input inputSizeLarge inputInnerLeft"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput innerRight renders \`innerRight\` node when HTML element is provided 1`] = `
<TextInput
  innerRight={
    <div>
      Goose
    </div>
  }
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge inputInnerRight"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputInnerElement"
      onClick={[Function]}
    >
      <div>
        Goose
      </div>
    </div>
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput innerRight renders \`innerRight\` node when text is provided 1`] = `
<TextInput
  innerRight="Goose"
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge inputInnerRight"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputInnerElement"
      onClick={[Function]}
    >
      Goose
    </div>
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput renders \`value\` as the input value 1`] = `
<div
  class="root rootUiStateDefault"
>
  <input
    class="input inputSizeLarge"
    type="text"
    value="Goose"
  />
  <div
    class="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
  />
</div>
`;

exports[`TextInput renders email input when requested 1`] = `
<TextInput
  onChange={[Function]}
  type="email"
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="email"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput renders large input 1`] = `
<TextInput
  onChange={[Function]}
  size="large"
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput renders number input when requested 1`] = `
<TextInput
  onChange={[Function]}
  type="number"
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="number"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput renders search input when requested 1`] = `
<TextInput
  onChange={[Function]}
  type="search"
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="search"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput renders small input 1`] = `
<TextInput
  onChange={[Function]}
  size="small"
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeSmall"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput renders telephone input when requested 1`] = `
<TextInput
  onChange={[Function]}
  type="tel"
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="tel"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInput renders text input by default 1`] = `
<TextInput
  onChange={[Function]}
>
  <div
    className="root rootUiStateDefault"
  >
    <input
      autoFocus={false}
      className="input inputSizeLarge"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      onKeyUp={[Function]}
      readOnly={false}
      required={false}
      type="text"
      value=""
    />
    <div
      className="inputStyles inputStylesRoundedBordersLeft inputStylesRoundedBordersRight inputStylesUiStateDefault"
    />
  </div>
</TextInput>
`;

exports[`TextInputClearButton includes \`aria-label\` on button to describe the SVG icon 1`] = `
<TextInputClearButton
  onClick={[Function]}
>
  <TextInputIconContainer>
    <div
      className="inputIconContainer inputIconContainerPositionLeft"
    >
      <div
        className="displayNone"
      >
        <button
          aria-label="Clear input"
          className="unstyledButton"
          onClick={[Function]}
          type="button"
        >
          <svg
            className="closeButtonIcon"
            fill="none"
            height="18"
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="3"
            viewBox="0 0 24 24"
            width="18"
          >
            <line
              x1="18"
              x2="6"
              y1="6"
              y2="18"
            />
            <line
              x1="6"
              x2="18"
              y1="6"
              y2="18"
            />
          </svg>
        </button>
      </div>
    </div>
  </TextInputIconContainer>
</TextInputClearButton>
`;

exports[`TextInputClearButton renders an SVG icon 1`] = `
<TextInputClearButton
  onClick={[Function]}
>
  <TextInputIconContainer>
    <div
      className="inputIconContainer inputIconContainerPositionLeft"
    >
      <div
        className="displayNone"
      >
        <button
          aria-label="Clear input"
          className="unstyledButton"
          onClick={[Function]}
          type="button"
        >
          <svg
            className="closeButtonIcon"
            fill="none"
            height="18"
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="3"
            viewBox="0 0 24 24"
            width="18"
          >
            <line
              x1="18"
              x2="6"
              y1="6"
              y2="18"
            />
            <line
              x1="6"
              x2="18"
              y1="6"
              y2="18"
            />
          </svg>
        </button>
      </div>
    </div>
  </TextInputIconContainer>
</TextInputClearButton>
`;

exports[`TextInputIcon applies color prop 1`] = `
<TextInputIcon
  color="LightGoldenRodYellow"
>
  <TextInputIconContainer
    style={
      Object {
        "color": "LightGoldenRodYellow",
      }
    }
  >
    <div
      className="inputIconContainer inputIconContainerPositionLeft"
      style={
        Object {
          "color": "LightGoldenRodYellow",
        }
      }
    >
      Goose
    </div>
  </TextInputIconContainer>
</TextInputIcon>
`;

exports[`TextInputIcon renders children 1`] = `
<TextInputIcon>
  <TextInputIconContainer
    style={
      Object {
        "color": "inherit",
      }
    }
  >
    <div
      className="inputIconContainer inputIconContainerPositionLeft"
      style={
        Object {
          "color": "inherit",
        }
      }
    >
      <svg>
        <title>
          Goose
        </title>
      </svg>
    </div>
  </TextInputIconContainer>
</TextInputIcon>
`;
