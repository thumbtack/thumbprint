// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EntityAvatar renders an image when the user has one 1`] = `
<EntityAvatar
  imageUrl="//www.placecage.com/130/130"
  initial="N"
  size="small"
>
  <div
    className="root rootSmall"
  >
    <img
      className="baseAvatar squareAvatar lazyload"
      data-src="//www.placecage.com/130/130"
    />
  </div>
</EntityAvatar>
`;

exports[`EntityAvatar renders the initials when the user has no image 1`] = `
<EntityAvatar
  initial="N"
  size="small"
>
  <div
    className="root rootSmall"
  >
    <span
      className="initialsAvatar squareAvatar"
      style={
        Object {
          "backgroundColor": "#e8f1fd",
          "color": "#383c80",
        }
      }
    >
      N
    </span>
  </div>
</EntityAvatar>
`;

exports[`adds lazyload class for lazysizes to work 1`] = `
<UserAvatar
  imageUrl="//www.placecage.com/130/130"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <img
      className="baseAvatar circleAvatar lazyload"
      data-src="//www.placecage.com/130/130"
    />
  </div>
</UserAvatar>
`;

exports[`adds the \`fullName\` as \`alt\` text when image is provided 1`] = `
<UserAvatar
  fullName="Duck Goose"
  imageUrl="//www.placecage.com/130/130"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <img
      alt="Avatar for Duck Goose"
      className="baseAvatar circleAvatar lazyload"
      data-src="//www.placecage.com/130/130"
      title="Avatar for Duck Goose"
    />
  </div>
</UserAvatar>
`;

exports[`adds the \`fullName\` as \`title\` text 1`] = `
<UserAvatar
  fullName="Duck Goose"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "background": "#fafafa",
          "text": "#2f3033",
        }
      }
      title="Avatar for Duck Goose"
    />
  </div>
</UserAvatar>
`;

exports[`adds the \`fullName\` as \`title\` text 2`] = `
<UserAvatar
  fullName="Duck Goose"
  imageUrl="//www.placecage.com/130/130"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <img
      alt="Avatar for Duck Goose"
      className="baseAvatar circleAvatar lazyload"
      data-src="//www.placecage.com/130/130"
      title="Avatar for Duck Goose"
    />
  </div>
</UserAvatar>
`;

exports[`adds the \`fullName\` as \`title\` text 3`] = `
<UserAvatar
  fullName="Duck Goose"
  isChecked={false}
  size="small"
  title="DG"
>
  <div
    className="root rootSmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "background": "#fafafa",
          "text": "#2f3033",
        }
      }
      title="Avatar for Duck Goose"
    />
  </div>
</UserAvatar>
`;

exports[`does not add lazyload class if an image is not provided 1`] = `
<UserAvatar
  initials="NC"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#e8f1fd",
          "color": "#383c80",
        }
      }
    >
      NC
    </span>
  </div>
</UserAvatar>
`;

exports[`does not add the \`fullName\` as \`alt\` text when no image is provided 1`] = `
<UserAvatar
  fullName="Duck Goose"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "background": "#fafafa",
          "text": "#2f3033",
        }
      }
      title="Avatar for Duck Goose"
    />
  </div>
</UserAvatar>
`;

exports[`does not render a badge by default 1`] = `
<UserAvatar
  initials="DK"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`does not render a badge by default 2`] = `
<UserAvatar
  initials="DK"
  isChecked={false}
  size="large"
>
  <div
    className="root rootLarge"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`does not render a badge when \`size\` is \`xsmall\` 1`] = `
<UserAvatar
  initials="DK"
  isChecked={false}
  size="xsmall"
>
  <div
    className="root rootXsmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`does not render a badge when \`size\` is \`xsmall\` 2`] = `
<UserAvatar
  initials="DK"
  isChecked={true}
  size="xsmall"
>
  <div
    className="root rootXsmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`does not render a badge when \`size\` is \`xsmall\` 3`] = `
<UserAvatar
  initials="DK"
  isChecked={false}
  isOnline={true}
  size="xsmall"
>
  <div
    className="root rootXsmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`renders \`isOnline\` when \`isOnline\` is true 1`] = `
<UserAvatar
  isChecked={false}
  isOnline={true}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <Badge
      background="green"
      size="small"
    >
      <div
        className="badge badgeGreen smallAvatarSmallBadge"
      />
    </Badge>
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "background": "#fafafa",
          "text": "#2f3033",
        }
      }
    />
  </div>
</UserAvatar>
`;

exports[`renders a badge if size is larger than \`xsmall\` and valid badge prop is supplied 1`] = `
<UserAvatar
  initials="DK"
  isChecked={true}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <Badge
      background="green"
      size="small"
    >
      <div
        className="badge badgeGreen smallAvatarLargeBadge"
      >
        <CheckIcon>
          <svg
            viewBox="0 0 17 13"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M17 .943c0 .26-.1.5-.28.69L5.81 12.713c-.18.18-.43.28-.69.29-.26 0-.51-.11-.69-.29 0 0-3.79-3.78-4.16-4.16a.942.942 0 0 1-.27-.69c0-.26.11-.5.3-.68.39-.36 1-.34 1.37.04.26.27 2.33 2.34 3.44 3.44L15.33.293c.37-.38.98-.39 1.37-.03.18.18.29.42.3.68"
              fillRule="evenodd"
            />
          </svg>
        </CheckIcon>
      </div>
    </Badge>
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`renders a badge if size is larger than \`xsmall\` and valid badge prop is supplied 2`] = `
<UserAvatar
  initials="DK"
  isChecked={true}
  size="medium"
>
  <div
    className="root rootMedium"
  >
    <Badge
      background="green"
      size="medium"
    >
      <div
        className="badge badgeGreen mediumAvatarLargeBadge"
      >
        <CheckIcon>
          <svg
            viewBox="0 0 17 13"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M17 .943c0 .26-.1.5-.28.69L5.81 12.713c-.18.18-.43.28-.69.29-.26 0-.51-.11-.69-.29 0 0-3.79-3.78-4.16-4.16a.942.942 0 0 1-.27-.69c0-.26.11-.5.3-.68.39-.36 1-.34 1.37.04.26.27 2.33 2.34 3.44 3.44L15.33.293c.37-.38.98-.39 1.37-.03.18.18.29.42.3.68"
              fillRule="evenodd"
            />
          </svg>
        </CheckIcon>
      </div>
    </Badge>
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`renders a badge if size is larger than \`xsmall\` and valid badge prop is supplied 3`] = `
<UserAvatar
  initials="DK"
  isChecked={false}
  isOnline={true}
  size="medium"
>
  <div
    className="root rootMedium"
  >
    <Badge
      background="green"
      size="medium"
    >
      <div
        className="badge badgeGreen mediumAvatarSmallBadge"
      />
    </Badge>
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`renders an SVG when \`isChecked\` is true 1`] = `
<UserAvatar
  initials="DK"
  isChecked={true}
  size="medium"
>
  <div
    className="root rootMedium"
  >
    <Badge
      background="green"
      size="medium"
    >
      <div
        className="badge badgeGreen mediumAvatarLargeBadge"
      >
        <CheckIcon>
          <svg
            viewBox="0 0 17 13"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M17 .943c0 .26-.1.5-.28.69L5.81 12.713c-.18.18-.43.28-.69.29-.26 0-.51-.11-.69-.29 0 0-3.79-3.78-4.16-4.16a.942.942 0 0 1-.27-.69c0-.26.11-.5.3-.68.39-.36 1-.34 1.37.04.26.27 2.33 2.34 3.44 3.44L15.33.293c.37-.38.98-.39 1.37-.03.18.18.29.42.3.68"
              fillRule="evenodd"
            />
          </svg>
        </CheckIcon>
      </div>
    </Badge>
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`renders an SVG when \`isChecked\` is true 2`] = `
<UserAvatar
  initials="DK"
  isChecked={true}
  size="medium"
>
  <div
    className="root rootMedium"
  >
    <Badge
      background="green"
      size="medium"
    >
      <div
        className="badge badgeGreen mediumAvatarLargeBadge"
      >
        <CheckIcon>
          <svg
            viewBox="0 0 17 13"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M17 .943c0 .26-.1.5-.28.69L5.81 12.713c-.18.18-.43.28-.69.29-.26 0-.51-.11-.69-.29 0 0-3.79-3.78-4.16-4.16a.942.942 0 0 1-.27-.69c0-.26.11-.5.3-.68.39-.36 1-.34 1.37.04.26.27 2.33 2.34 3.44 3.44L15.33.293c.37-.38.98-.39 1.37-.03.18.18.29.42.3.68"
              fillRule="evenodd"
            />
          </svg>
        </CheckIcon>
      </div>
    </Badge>
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#fdf7e7",
          "color": "#8a5500",
        }
      }
    >
      DK
    </span>
  </div>
</UserAvatar>
`;

exports[`renders an image when the user has one 1`] = `
<UserAvatar
  imageUrl="//www.placecage.com/130/130"
  initials="NC"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <img
      className="baseAvatar circleAvatar lazyload"
      data-src="//www.placecage.com/130/130"
    />
  </div>
</UserAvatar>
`;

exports[`renders checkmark SVG when \`isChecked\` and \`isOnline\` are true 1`] = `
<UserAvatar
  isChecked={true}
  isOnline={true}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <Badge
      background="green"
      size="small"
    >
      <div
        className="badge badgeGreen smallAvatarLargeBadge"
      >
        <CheckIcon>
          <svg
            viewBox="0 0 17 13"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M17 .943c0 .26-.1.5-.28.69L5.81 12.713c-.18.18-.43.28-.69.29-.26 0-.51-.11-.69-.29 0 0-3.79-3.78-4.16-4.16a.942.942 0 0 1-.27-.69c0-.26.11-.5.3-.68.39-.36 1-.34 1.37.04.26.27 2.33 2.34 3.44 3.44L15.33.293c.37-.38.98-.39 1.37-.03.18.18.29.42.3.68"
              fillRule="evenodd"
            />
          </svg>
        </CheckIcon>
      </div>
    </Badge>
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "background": "#fafafa",
          "text": "#2f3033",
        }
      }
    />
  </div>
</UserAvatar>
`;

exports[`renders the initials when the user has no image 1`] = `
<UserAvatar
  initials="NC"
  isChecked={false}
  size="small"
>
  <div
    className="root rootSmall"
  >
    <span
      className="initialsAvatar circleAvatar"
      style={
        Object {
          "backgroundColor": "#e8f1fd",
          "color": "#383c80",
        }
      }
    >
      NC
    </span>
  </div>
</UserAvatar>
`;
